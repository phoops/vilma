// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.6
// source: identity.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VilmaIdentityPoolClient is the client API for VilmaIdentityPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VilmaIdentityPoolClient interface {
	GetIdentityByIdentityId(ctx context.Context, in *GetIdentityByIdRequest, opts ...grpc.CallOption) (*Identity, error)
}

type vilmaIdentityPoolClient struct {
	cc grpc.ClientConnInterface
}

func NewVilmaIdentityPoolClient(cc grpc.ClientConnInterface) VilmaIdentityPoolClient {
	return &vilmaIdentityPoolClient{cc}
}

func (c *vilmaIdentityPoolClient) GetIdentityByIdentityId(ctx context.Context, in *GetIdentityByIdRequest, opts ...grpc.CallOption) (*Identity, error) {
	out := new(Identity)
	err := c.cc.Invoke(ctx, "/com.phoops.vilma.VilmaIdentityPool/GetIdentityByIdentityId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VilmaIdentityPoolServer is the server API for VilmaIdentityPool service.
// All implementations must embed UnimplementedVilmaIdentityPoolServer
// for forward compatibility
type VilmaIdentityPoolServer interface {
	GetIdentityByIdentityId(context.Context, *GetIdentityByIdRequest) (*Identity, error)
	mustEmbedUnimplementedVilmaIdentityPoolServer()
}

// UnimplementedVilmaIdentityPoolServer must be embedded to have forward compatible implementations.
type UnimplementedVilmaIdentityPoolServer struct {
}

func (UnimplementedVilmaIdentityPoolServer) GetIdentityByIdentityId(context.Context, *GetIdentityByIdRequest) (*Identity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityByIdentityId not implemented")
}
func (UnimplementedVilmaIdentityPoolServer) mustEmbedUnimplementedVilmaIdentityPoolServer() {}

// UnsafeVilmaIdentityPoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VilmaIdentityPoolServer will
// result in compilation errors.
type UnsafeVilmaIdentityPoolServer interface {
	mustEmbedUnimplementedVilmaIdentityPoolServer()
}

func RegisterVilmaIdentityPoolServer(s grpc.ServiceRegistrar, srv VilmaIdentityPoolServer) {
	s.RegisterService(&VilmaIdentityPool_ServiceDesc, srv)
}

func _VilmaIdentityPool_GetIdentityByIdentityId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VilmaIdentityPoolServer).GetIdentityByIdentityId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.phoops.vilma.VilmaIdentityPool/GetIdentityByIdentityId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VilmaIdentityPoolServer).GetIdentityByIdentityId(ctx, req.(*GetIdentityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VilmaIdentityPool_ServiceDesc is the grpc.ServiceDesc for VilmaIdentityPool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VilmaIdentityPool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.phoops.vilma.VilmaIdentityPool",
	HandlerType: (*VilmaIdentityPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIdentityByIdentityId",
			Handler:    _VilmaIdentityPool_GetIdentityByIdentityId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity.proto",
}
